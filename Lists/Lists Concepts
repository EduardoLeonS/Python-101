I.- LIST EXCERCISE (GRADEBOOK)

last_semester_gradebook = [["politics", 80], ["latin", 96], ["dance", 97], ["architecture", 65]]

# Your code below: 
#1.- Create a list called subjects and fill it with the classes you are taking:
subjects = ["physics", "calculus", "poetry", "history"]
#2.- Create a list called grades and fill it with your scores:
grades = [98, 97, 85, 88]
#3.- Create a two-dimensional list to combine subjects and grades. Use the table below as a reference to associated values.
gradebook = [["physics", 98], ["calculus", 97], ["poetry", 85], ["history", 88]]
#4.- Your grade for your computer science class just came in! You got a perfect score, 100! Use the .append() method to add a list with the values of "computer science" and an associated grade value of 100 to our two-dimensional list of gradebook.
gradebook.append(["computer science", 100])
#5.- Your grade for "visual arts" just came in! You got a 93! Use append to add ["visual arts", 93] to gradebook.
gradebook.append(["visual arts", 93])
#6.- Our instructor just told us they made a mistake grading and are rewarding an extra 5 points for our visual arts class. Access the index of the grade for your visual arts class and modify it to be 5 points greater
gradebook[-1][-1] = 98
#7.- You decided to switch from a numerical grade value to a Pass/Fail option for your poetry class.Find the grade value in your gradebook for your poetry class and use the .remove() method to delete it.
gradebook[2].remove(85)
#8.-Use the .append() method to then add a new "Pass" value to the sublist where your poetry class is located.
gradebook[2].append("Pass") 
#9.-You also have your grades from last semester, stored in last_semester_gradebook. Create a new variable full_gradebook that combines both last_semester_gradebook and gradebook using + to have one complete grade book.
full_gradebook = last_semester_gradebook + gradebook 
print(full_gradebook)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
II.- BUILT-IN FUNCTIONS PRACTICE (LENÂ´S PIZZAS)
# Your code below:
toppings = ["pepperoni", "pineapple", "cheese", "sausage", "olives", "anchovies", "mushrooms"]
#1.-Create a new list with the pizzasÂ´prices
prices = [2, 6, 1, 3, 2, 7, 2]
#2.-We need to count the number of occurrences of 2 in the prices lists
num_two_dollar_slices = prices.count(2)
#3.-Find the length of the toppings list 
num_pizzas = len(toppings)
print(num_pizzas)
#4.- Add the welcoming string message:
print("We sell "+ str(num_pizzas) + " different kinds of pizza!")
#5.- Create a 2D List merging the toppings and prices lists
pizza_and_prices = [[2, "pepperoni"], [6, "pineapple"], [1, "cheese"], [3, "sausage"], [2, "olives"], [7, "anchovies"], [2, "mushrooms"]]
#6.- Sort the pizza and prices list in ascending price
pizza_and_prices.sort()
#7.- Store the first element of pizza and prices list
cheapest_pizza = pizza_and_prices[:1]
#8.- Get the last item of pizza and prices
priciest_pizza = pizza_and_prices[-1:]
#9.- Remove the last element of pizza and prices
pizza_and_prices.pop()
#10.- Add a new topping called peppers 
pizza_and_prices.insert(4, [2.5, "peppers"])
#11.- Slice the first 3 elements of pizza and prices
three_cheapest = pizza_and_prices[:3]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
III .- ADVANCE FUNCTIONS USING LISTS
#A) Function that counts every three numbers within a range:
def every_three_nums(start):
  return list(range(start, 101, 3))

#B) Remove middle elements in a list:
def remove_middle(lst, start, end):
  return lst[:start] + lst[end+1:]

#C) More frequent element in a list, it should return the most frequent element:
def more_frequent_item(lst, item1, item2):
  if lst.count(item1) >= lst.count(item2):
    return item1
  else:
      return item2

#D) Double the index value located in an specified index  
def double_index(lst, index):
  # Checks to see if index is too big
  if index >= len(lst):
    return lst
  else:
    # Gets the original list up to index
    new_lst = lst[0:index]
 # Adds double the value at index to the new list 
  new_lst.append(lst[index]*2)
  #  Adds the rest of the original list
  new_lst = new_lst + lst[index+1:]
  return new_lst

#E) Return a middle item in a list
def middle_element(lst):
  if len(lst) % 2 == 0:
    sum = lst[int(len(lst)/2)] + lst[int(len(lst)/2) - 1]
    return sum / 2
  else:
    return lst[int(len(lst)/2)]
